# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Access {
  Group: Group
  _group: Group
  _id: String
  _user: User
  created: DateTime
  role: [String]
}

type AccessCreateManyOutput {
  result: Access
}

type AccessCreateOutput {
  result: Access
}

type AccessGetConnectionConnection {
  edges: [AccessGetConnectionEdge]
  pageInfo: PageInfo
}

type AccessGetConnectionEdge {
  cursor: String
  node: Access
}

type AccessGetConnectionOutput {
  result: AccessGetConnectionConnection
}

type AccessGetManyOutput {
  result: [Access]
}

type AccessGetManyProtectedGetManyOutput {
  result: [Access]
}

type AccessGetOutput {
  result: Access
}

type AccessRemoveOutput {
  result: Access
}

type AccessSearchOutput {
  result: [Access]
}

type AccessUpdateOutput {
  result: Access
}

input AroomOrderContactInput {
  stopAddress: String
  stopName: String
  stopPhoneNumber: String
}

input AroomOrderInput {
  dropoff: String
  orderNumber: Float
  orderReceiptAttach: String
  pickup: String
}

input AroomUserInput {
  companyName: String
  email: String
  name: String
  phoneNumber: Float
}

type Bank {
  _id: String
  _user: User
  created: DateTime
  externalId: String
  fingerprint: String
  last4: String
  name: String
}

type BankCreateManyOutput {
  result: Bank
  root: User
}

type BankCreateOutput {
  result: Bank
  root: User
}

type BankGetConnectionConnection {
  edges: [BankGetConnectionEdge]
  pageInfo: PageInfo
}

type BankGetConnectionEdge {
  cursor: String
  node: Bank
}

type BankGetConnectionOutput {
  result: BankGetConnectionConnection
  root: User
}

type BankGetManyOutput {
  result: [Bank]
  root: User
}

type BankGetOutput {
  result: Bank
  root: User
}

input BankInput {
  _id: String
  _user: UserInput
  created: DateTime
  externalId: String
  fingerprint: String
  last4: String
  name: String
}

type BankRemoveOutput {
  result: Bank
  root: User
}

type BankSearchOutput {
  result: [Bank]
  root: User
}

type BankUpdateOutput {
  result: Bank
  root: User
}

type Card {
  _id: String
  _user: User
  created: DateTime
  expMonth: Float
  expYear: Float
  externalId: String
  fingerprint: String
  funding: String
  last4: String
  name: String
}

type CardCreateManyOutput {
  result: Card
  root: User
}

type CardCreateOutput {
  result: Card
  root: User
}

type CardGetConnectionConnection {
  edges: [CardGetConnectionEdge]
  pageInfo: PageInfo
}

type CardGetConnectionEdge {
  cursor: String
  node: Card
}

type CardGetConnectionOutput {
  result: CardGetConnectionConnection
  root: User
}

type CardGetManyOutput {
  result: [Card]
  root: User
}

type CardGetOutput {
  result: Card
  root: User
}

input CardInput {
  _id: String
  _user: UserInput
  created: DateTime
  expMonth: Float
  expYear: Float
  externalId: String
  fingerprint: String
  funding: String
  last4: String
  name: String
}

type CardRemoveOutput {
  result: Card
  root: User
}

type CardSearchOutput {
  result: [Card]
  root: User
}

type CardUpdateOutput {
  result: Card
  root: User
}

type Chat {
  _id: String
  created: DateTime
  name: String
}

type ChatCreateManyOutput {
  result: Chat
}

type ChatCreateOutput {
  result: Chat
}

type ChatGetConnectionConnection {
  edges: [ChatGetConnectionEdge]
  pageInfo: PageInfo
}

type ChatGetConnectionEdge {
  cursor: String
  node: Chat
}

type ChatGetConnectionOutput {
  result: ChatGetConnectionConnection
}

type ChatGetManyOutput {
  result: [Chat]
}

type ChatGetOutput {
  result: Chat
}

type ChatRemoveOutput {
  result: Chat
}

type ChatSearchOutput {
  result: [Chat]
}

type ChatUpdateOutput {
  result: Chat
}

input CoordinateInput {
  latitude: Float
  longitude: Float
}

input CreateDeliveryInput {
  Creator: AroomUserInput
  finalDropoff: String
  firstPickup: String
  orderContact: [AroomOrderContactInput]
  orderInformation: [AroomOrderInput]
  pickupDate: DateTime
  submitDate: DateTime
  totalVolume: String
  totalWeight: Float
  tripPricing: Float
  vehicleType: String
  waypoint: [String]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeliveryResult {
  success: Boolean
}

input GetRouteInput {
  coordinates: [CoordinateInput]
  timing: String
  vehicle: String
}

type Group {
  Role: [Role]
  _id: String
  created: DateTime
  logo: String
  name: String
  types: [String]
}

type GroupCreateManyOutput {
  result: Group
}

type GroupCreateOutput {
  result: Group
}

type GroupGetConnectionConnection {
  edges: [GroupGetConnectionEdge]
  pageInfo: PageInfo
}

type GroupGetConnectionEdge {
  cursor: String
  node: Group
}

type GroupGetConnectionOutput {
  result: GroupGetConnectionConnection
}

type GroupGetManyOutput {
  result: [Group]
}

type GroupGetOutput {
  result: Group
}

type GroupRemoveOutput {
  result: Group
}

type GroupSearchOutput {
  result: [Group]
}

type GroupUpdateOutput {
  result: Group
}

type MapRoute {
  distance: Float
  duration: Float
  polyline: String
  priceTiers: [PriceTier]
}

type Mutation {
  AccessCreate: AccessCreateOutput
  AccessCreateMany: AccessCreateManyOutput
  AccessRemove: AccessRemoveOutput
  AccessUpdate: AccessUpdateOutput
  BankCreate: BankCreateOutput
  BankCreateMany: BankCreateManyOutput
  BankRemove: BankRemoveOutput
  BankUpdate: BankUpdateOutput
  CardCreate: CardCreateOutput
  CardCreateMany: CardCreateManyOutput
  CardRemove: CardRemoveOutput
  CardUpdate: CardUpdateOutput
  ChatCreate: ChatCreateOutput
  ChatCreateMany: ChatCreateManyOutput
  ChatRemove: ChatRemoveOutput
  ChatUpdate: ChatUpdateOutput
  CreateDelivery(input: CreateDeliveryInput): DeliveryResult
  GroupCreate: GroupCreateOutput
  GroupCreateMany: GroupCreateManyOutput
  GroupRemove: GroupRemoveOutput
  GroupUpdate: GroupUpdateOutput
  OrderCreate: OrderCreateOutput
  OrderCreateMany: OrderCreateManyOutput
  OrderRemove: OrderRemoveOutput
  OrderUpdate: OrderUpdateOutput
  OtpCreate: OtpCreateOutput
  OtpCreateMany: OtpCreateManyOutput
  OtpRemove: OtpRemoveOutput
  OtpUpdate: OtpUpdateOutput
  PaymentMethodTokenCreate(input: PaymentMethodTokenCreateInput): PaymentMethodTokenCreateOutput
  PricingCreate: PricingCreateOutput
  PricingCreateMany: PricingCreateManyOutput
  PricingRemove: PricingRemoveOutput
  PricingUpdate: PricingUpdateOutput
  ProductCreate: ProductCreateOutput
  ProductCreateMany: ProductCreateManyOutput
  ProductRemove: ProductRemoveOutput
  ProductUpdate: ProductUpdateOutput
  RoleCreate: RoleCreateOutput
  RoleCreateMany: RoleCreateManyOutput
  RoleRemove: RoleRemoveOutput
  RoleUpdate: RoleUpdateOutput
  SignInCreate: SignInCreateOutput
  SignInUserUpdate(input: SignInUserUpdateInput): SignInUserUpdateOutput
  SignInUsernameCreate(input: SignInUsernameCreateInput): SignInUsernameCreateOutput
  SocketCreate: SocketCreateOutput
  SocketCreateMany: SocketCreateManyOutput
  SocketRemove: SocketRemoveOutput
  SocketUpdate: SocketUpdateOutput
  UserCreate: UserCreateOutput
  UserCreateMany: UserCreateManyOutput
  UserRemove: UserRemoveOutput
  UserUpdate: UserUpdateOutput
  UtilityCreate: UtilityCreateOutput
  UtilityCreateMany: UtilityCreateManyOutput
  UtilityRemove: UtilityRemoveOutput
  UtilityUpdate: UtilityUpdateOutput
  VendorCreate: VendorCreateOutput
  VendorCreateMany: VendorCreateManyOutput
  VendorRemove: VendorRemoveOutput
  VendorUpdate: VendorUpdateOutput
  linkedUserCreate: linkedUserCreateOutput
  linkedUserCreateMany: linkedUserCreateManyOutput
  linkedUserRemove: linkedUserRemoveOutput
  linkedUserUpdate: linkedUserUpdateOutput
}

type Order {
  _id: String
  created: DateTime
  items: [ProductItem]
  paymentMethodId: String
}

type OrderCreateManyOutput {
  result: Order
}

type OrderCreateOutput {
  result: Order
}

type OrderGetConnectionConnection {
  edges: [OrderGetConnectionEdge]
  pageInfo: PageInfo
}

type OrderGetConnectionEdge {
  cursor: String
  node: Order
}

type OrderGetConnectionOutput {
  result: OrderGetConnectionConnection
}

type OrderGetManyOutput {
  result: [Order]
}

type OrderGetOutput {
  result: Order
}

type OrderRemoveOutput {
  result: Order
}

type OrderSearchOutput {
  result: [Order]
}

type OrderUpdateOutput {
  result: Order
}

type Otp {
  _id: String
  callingCode: String
  created: DateTime
  email: String
  otp: String
  phone: String
}

type OtpCreateManyOutput {
  result: Otp
}

type OtpCreateOutput {
  result: Otp
}

type OtpGetConnectionConnection {
  edges: [OtpGetConnectionEdge]
  pageInfo: PageInfo
}

type OtpGetConnectionEdge {
  cursor: String
  node: Otp
}

type OtpGetConnectionOutput {
  result: OtpGetConnectionConnection
}

type OtpGetManyOutput {
  result: [Otp]
}

type OtpGetOutput {
  result: Otp
}

type OtpRemoveOutput {
  result: Otp
}

type OtpSearchOutput {
  result: [Otp]
}

type OtpUpdateOutput {
  result: Otp
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type PaymentMethod {
  _id: String
  _user: User
  created: DateTime
  externalId: String
  fingerprint: String
  last4: String
  name: String
  type: String
}

type PaymentMethodGetManyOutput {
  result: [PaymentMethod]
  root: User
}

input PaymentMethodInput {
  _id: String
  _user: UserInput
  created: DateTime
  externalId: String
  fingerprint: String
  last4: String
  name: String
  type: String
}

input PaymentMethodTokenCreateFormInput {
  paymentMethodId: String
  products: [ProductItemInput]
}

input PaymentMethodTokenCreateInput {
  form: PaymentMethodTokenCreateFormInput
  root: String
}

type PaymentMethodTokenCreateOutput {
  result: String
}

type PriceTier {
  price: Float
  timing: String
}

type Pricing {
  _id: String
  _product: Product
  created: DateTime
  currency: String
  frequency: String
  price: Float
}

type PricingCreateManyOutput {
  result: Pricing
  root: Product
}

type PricingCreateOutput {
  result: Pricing
  root: Product
}

type PricingGetConnectionConnection {
  edges: [PricingGetConnectionEdge]
  pageInfo: PageInfo
}

type PricingGetConnectionEdge {
  cursor: String
  node: Pricing
}

type PricingGetConnectionOutput {
  result: PricingGetConnectionConnection
  root: Product
}

type PricingGetManyOutput {
  result: [Pricing]
  root: Product
}

type PricingGetOutput {
  result: Pricing
  root: Product
}

type PricingRemoveOutput {
  result: Pricing
  root: Product
}

type PricingSearchOutput {
  result: [Pricing]
  root: Product
}

type PricingUpdateOutput {
  result: Pricing
  root: Product
}

type Product {
  Pricing: [Pricing]
  _id: String
  created: DateTime
  description: String
  imageSrc: [String]
  name: String
}

type ProductCreateManyOutput {
  result: Product
}

type ProductCreateOutput {
  result: Product
}

type ProductGetConnectionConnection {
  edges: [ProductGetConnectionEdge]
  pageInfo: PageInfo
}

type ProductGetConnectionEdge {
  cursor: String
  node: Product
}

type ProductGetConnectionOutput {
  result: ProductGetConnectionConnection
}

type ProductGetManyOutput {
  result: [Product]
}

type ProductGetOutput {
  result: Product
}

type ProductItem {
  name: String
  price: Float
  pricingId: String
  productId: String
  quantity: Float
}

input ProductItemInput {
  name: String
  price: Float
  pricingId: String
  productId: String
  quantity: Float
}

type ProductRemoveOutput {
  result: Product
}

type ProductSearchOutput {
  result: [Product]
}

type ProductUpdateOutput {
  result: Product
}

type Query {
  AccessGet: AccessGetOutput
  AccessGetConnection: AccessGetConnectionOutput
  AccessGetMany: AccessGetManyOutput
  AccessGetManyProtectedGetMany: AccessGetManyProtectedGetManyOutput
  AccessSearch: AccessSearchOutput
  BankGet: BankGetOutput
  BankGetConnection: BankGetConnectionOutput
  BankGetMany: BankGetManyOutput
  BankSearch: BankSearchOutput
  CardGet: CardGetOutput
  CardGetConnection: CardGetConnectionOutput
  CardGetMany: CardGetManyOutput
  CardSearch: CardSearchOutput
  ChatGet: ChatGetOutput
  ChatGetConnection: ChatGetConnectionOutput
  ChatGetMany: ChatGetManyOutput
  ChatSearch: ChatSearchOutput
  GetMapRoute(input: GetRouteInput): MapRoute
  GroupGet: GroupGetOutput
  GroupGetConnection: GroupGetConnectionOutput
  GroupGetMany: GroupGetManyOutput
  GroupSearch: GroupSearchOutput
  OrderGet: OrderGetOutput
  OrderGetConnection: OrderGetConnectionOutput
  OrderGetMany: OrderGetManyOutput
  OrderSearch: OrderSearchOutput
  OtpGet: OtpGetOutput
  OtpGetConnection: OtpGetConnectionOutput
  OtpGetMany: OtpGetManyOutput
  OtpSearch: OtpSearchOutput
  PaymentMethodGetMany: PaymentMethodGetManyOutput
  PricingGet: PricingGetOutput
  PricingGetConnection: PricingGetConnectionOutput
  PricingGetMany: PricingGetManyOutput
  PricingSearch: PricingSearchOutput
  ProductGet: ProductGetOutput
  ProductGetConnection: ProductGetConnectionOutput
  ProductGetMany: ProductGetManyOutput
  ProductSearch: ProductSearchOutput
  RoleGet: RoleGetOutput
  RoleGetConnection: RoleGetConnectionOutput
  RoleGetMany: RoleGetManyOutput
  RoleSearch: RoleSearchOutput
  SnapshotGet: SnapshotGetOutput
  SnapshotGetMany: SnapshotGetManyOutput
  SocketGet: SocketGetOutput
  SocketGetConnection: SocketGetConnectionOutput
  SocketGetMany: SocketGetManyOutput
  SocketSearch: SocketSearchOutput
  UserGet: UserGetOutput
  UserGetConnection: UserGetConnectionOutput
  UserGetMany: UserGetManyOutput
  UserSearch: UserSearchOutput
  UtilityGet: UtilityGetOutput
  UtilityGetConnection: UtilityGetConnectionOutput
  UtilityGetMany: UtilityGetManyOutput
  UtilitySearch: UtilitySearchOutput
  VendorGet: VendorGetOutput
  VendorGetConnection: VendorGetConnectionOutput
  VendorGetMany: VendorGetManyOutput
  VendorSearch: VendorSearchOutput
  linkedUserGet: linkedUserGetOutput
  linkedUserGetConnection: linkedUserGetConnectionOutput
  linkedUserGetMany: linkedUserGetManyOutput
  linkedUserSearch: linkedUserSearchOutput
}

type Role {
  _group: Group
  _id: String
  created: DateTime
  name: String
}

type RoleCreateManyOutput {
  result: Role
  root: Group
}

type RoleCreateOutput {
  result: Role
  root: Group
}

type RoleGetConnectionConnection {
  edges: [RoleGetConnectionEdge]
  pageInfo: PageInfo
}

type RoleGetConnectionEdge {
  cursor: String
  node: Role
}

type RoleGetConnectionOutput {
  result: RoleGetConnectionConnection
  root: Group
}

type RoleGetManyOutput {
  result: [Role]
  root: Group
}

type RoleGetOutput {
  result: Role
  root: Group
}

type RoleRemoveOutput {
  result: Role
  root: Group
}

type RoleSearchOutput {
  result: [Role]
  root: Group
}

type RoleUpdateOutput {
  result: Role
  root: Group
}

type SignIn {
  _id: String
  created: DateTime
  isNew: Boolean
  token: String
  user: User
}

type SignInCreateOutput {
  result: SignIn
}

input SignInUserUpdateFilterInput {
  booleanValue: Boolean
  condition: String
  dateValue: DateTime
  field: String
  numberValue: Float
  resourceArrayValue: [UserInput]
  resourceValue: UserInput
  stringArrayValue: [String]
  stringValue: String
}

input SignInUserUpdateInput {
  filter: [SignInUserUpdateFilterInput]
  root: String
  update: SignInUserUpdateUpdateInput
}

type SignInUserUpdateOutput {
  result: SignIn
}

input SignInUserUpdateUpdateInput {
  Bank: [BankInput]
  Card: [CardInput]
  PaymentMethod: [PaymentMethodInput]
  _id: String
  callingCode: String
  created: DateTime
  email: String
  first: String
  last: String
  linkedUser: [linkedUserInput]
  paymentMethodPrimary: String
  phone: String
}

input SignInUsernameCreateFormInput {
  callingCode: String
  email: String
  otp: String
  phone: String
}

input SignInUsernameCreateInput {
  form: SignInUsernameCreateFormInput
  root: String
}

type SignInUsernameCreateOutput {
  result: SignIn
}

type Snapshot {
  images: [String]
  name: String
}

type SnapshotGetManyOutput {
  result: [Snapshot]
}

type SnapshotGetOutput {
  result: Snapshot
}

type Socket {
  _id: String
  connections: String
  created: DateTime
  name: String
}

type SocketCreateManyOutput {
  result: Socket
}

type SocketCreateOutput {
  result: Socket
}

type SocketGetConnectionConnection {
  edges: [SocketGetConnectionEdge]
  pageInfo: PageInfo
}

type SocketGetConnectionEdge {
  cursor: String
  node: Socket
}

type SocketGetConnectionOutput {
  result: SocketGetConnectionConnection
}

type SocketGetManyOutput {
  result: [Socket]
}

type SocketGetOutput {
  result: Socket
}

type SocketRemoveOutput {
  result: Socket
}

type SocketSearchOutput {
  result: [Socket]
}

type SocketUpdateOutput {
  result: Socket
}

type User {
  Bank: [Bank]
  Card: [Card]
  PaymentMethod: [PaymentMethod]
  _id: String
  callingCode: String
  created: DateTime
  email: String
  first: String
  last: String
  linkedUser: [linkedUser]
  paymentMethodPrimary: String
  phone: String
}

type UserCreateManyOutput {
  result: User
}

type UserCreateOutput {
  result: User
}

type UserGetConnectionConnection {
  edges: [UserGetConnectionEdge]
  pageInfo: PageInfo
}

type UserGetConnectionEdge {
  cursor: String
  node: User
}

type UserGetConnectionOutput {
  result: UserGetConnectionConnection
}

type UserGetManyOutput {
  result: [User]
}

type UserGetOutput {
  result: User
}

input UserInput {
  Bank: [BankInput]
  Card: [CardInput]
  PaymentMethod: [PaymentMethodInput]
  _id: String
  callingCode: String
  created: DateTime
  email: String
  first: String
  last: String
  linkedUser: [linkedUserInput]
  paymentMethodPrimary: String
  phone: String
}

type UserRemoveOutput {
  result: User
}

type UserSearchOutput {
  result: [User]
}

type UserUpdateOutput {
  result: User
}

type Utility {
  _id: String
  _vender: Vendor
  created: DateTime
  description: String
  imageSrc: String
  name: String
  pricing: String
  type: [String]
  url: String
}

type UtilityCreateManyOutput {
  result: Utility
  root: Vendor
}

type UtilityCreateOutput {
  result: Utility
  root: Vendor
}

type UtilityGetConnectionConnection {
  edges: [UtilityGetConnectionEdge]
  pageInfo: PageInfo
}

type UtilityGetConnectionEdge {
  cursor: String
  node: Utility
}

type UtilityGetConnectionOutput {
  result: UtilityGetConnectionConnection
  root: Vendor
}

type UtilityGetManyOutput {
  result: [Utility]
  root: Vendor
}

type UtilityGetOutput {
  result: Utility
  root: Vendor
}

type UtilityRemoveOutput {
  result: Utility
  root: Vendor
}

type UtilitySearchOutput {
  result: [Utility]
  root: Vendor
}

type UtilityUpdateOutput {
  result: Utility
  root: Vendor
}

type Vendor {
  Utility: [Utility]
  _id: String
  created: DateTime
  imageSrc: String
  name: String
}

type VendorCreateManyOutput {
  result: Vendor
}

type VendorCreateOutput {
  result: Vendor
}

type VendorGetConnectionConnection {
  edges: [VendorGetConnectionEdge]
  pageInfo: PageInfo
}

type VendorGetConnectionEdge {
  cursor: String
  node: Vendor
}

type VendorGetConnectionOutput {
  result: VendorGetConnectionConnection
}

type VendorGetManyOutput {
  result: [Vendor]
}

type VendorGetOutput {
  result: Vendor
}

type VendorRemoveOutput {
  result: Vendor
}

type VendorSearchOutput {
  result: [Vendor]
}

type VendorUpdateOutput {
  result: Vendor
}

type linkedUser {
  _id: String
  _user: User
  created: DateTime
  externalId: String
  type: String
}

type linkedUserCreateManyOutput {
  result: linkedUser
  root: User
}

type linkedUserCreateOutput {
  result: linkedUser
  root: User
}

type linkedUserGetConnectionConnection {
  edges: [linkedUserGetConnectionEdge]
  pageInfo: PageInfo
}

type linkedUserGetConnectionEdge {
  cursor: String
  node: linkedUser
}

type linkedUserGetConnectionOutput {
  result: linkedUserGetConnectionConnection
  root: User
}

type linkedUserGetManyOutput {
  result: [linkedUser]
  root: User
}

type linkedUserGetOutput {
  result: linkedUser
  root: User
}

input linkedUserInput {
  _id: String
  _user: UserInput
  created: DateTime
  externalId: String
  type: String
}

type linkedUserRemoveOutput {
  result: linkedUser
  root: User
}

type linkedUserSearchOutput {
  result: [linkedUser]
  root: User
}

type linkedUserUpdateOutput {
  result: linkedUser
  root: User
}